import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ComponentRef, OnDestroy, ElementRef, OnChanges, OnInit, Injector, ComponentFactoryResolver, Renderer2, TemplateRef, ComponentFactory, SimpleChanges, } from '@angular/core';
import { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';
import { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';
import { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';
import { positionElements } from 'positioning';
/**
 All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):
 ```html
 <button
   class="btn btn-outline-secondary"
   mwlConfirmationPopover
   [popoverTitle]="popoverTitle"
   [popoverMessage]="popoverMessage"
   placement="left"
   (confirm)="confirmClicked = true"
   (cancel)="cancelClicked = true"
   [(isOpen)]="isOpen">
    Show confirm popover!
  </button>
  ```
 */
let ConfirmationPopoverDirective = class ConfirmationPopoverDirective {
    /**
     * @internal
     */
    constructor(viewContainerRef, elm, defaultOptions, cfr, renderer) {
        this.viewContainerRef = viewContainerRef;
        this.elm = elm;
        this.defaultOptions = defaultOptions;
        this.cfr = cfr;
        this.renderer = renderer;
        /**
         * Whether to disable showing the popover. Default `false`.
         */
        this.isDisabled = false;
        /**
         * Will open or show the popover when changed.
         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
         */
        this.isOpen = false;
        /**
         * Will emit when the popover is opened or closed
         */
        this.isOpenChange = new EventEmitter(true);
        /**
         * An expression that is called when the confirm button is clicked.
         */
        this.confirm = new EventEmitter();
        /**
         * An expression that is called when the cancel button is clicked.
         */
        this.cancel = new EventEmitter();
        this.eventListeners = [];
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.isOpenChange.emit(false);
    }
    /**
     * @internal
     */
    ngOnChanges(changes) {
        if (changes.isOpen) {
            if (changes.isOpen.currentValue === true) {
                this.showPopover();
            }
            else {
                this.hidePopover();
            }
        }
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.hidePopover();
    }
    /**
     * @internal
     */
    onConfirm(event) {
        this.confirm.emit(event);
        this.hidePopover();
    }
    /**
     * @internal
     */
    onCancel(event) {
        this.cancel.emit(event);
        this.hidePopover();
    }
    /**
     * @internal
     */
    togglePopover() {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    }
    onDocumentClick(event) {
        const closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined'
            ? this.closeOnOutsideClick
            : this.defaultOptions.closeOnOutsideClick;
        if (this.popover &&
            !this.elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target) &&
            closeOnOutsideClick) {
            this.hidePopover();
        }
    }
    showPopover() {
        if (!this.popover && !this.isDisabled) {
            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65
            // otherwise the document click event gets fired after the click event
            // that triggered the popover to open (no idea why this is so)
            setTimeout(() => {
                this.eventListeners = [
                    this.renderer.listen('document', 'click', (event) => this.onDocumentClick(event)),
                    this.renderer.listen('document', 'touchend', (event) => this.onDocumentClick(event)),
                    this.renderer.listen('window', 'resize', () => this.positionPopover()),
                ];
            });
            const options = new ConfirmationPopoverWindowOptions();
            Object.assign(options, this.defaultOptions, {
                onConfirm: (event) => {
                    this.onConfirm(event);
                },
                onCancel: (event) => {
                    this.onCancel(event);
                },
                onAfterViewInit: () => {
                    this.positionPopover();
                },
            });
            const optionalParams = [
                'confirmText',
                'cancelText',
                'placement',
                'confirmButtonType',
                'cancelButtonType',
                'focusButton',
                'hideConfirmButton',
                'hideCancelButton',
                'popoverClass',
                'appendToBody',
                'customTemplate',
                'reverseButtonOrder',
                'popoverTitle',
                'popoverMessage',
            ];
            optionalParams.forEach((param) => {
                if (typeof this[param] !== 'undefined') {
                    options[param] = this[param];
                }
            });
            const componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);
            const childInjector = Injector.create({
                providers: [
                    {
                        provide: ConfirmationPopoverWindowOptions,
                        useValue: options,
                    },
                ],
            });
            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);
            if (options.appendToBody) {
                document.body.appendChild(this.popover.location.nativeElement);
            }
            this.isOpenChange.emit(true);
        }
    }
    positionPopover() {
        if (this.popover) {
            const popoverElement = this.popover.location.nativeElement.children[0];
            positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);
        }
    }
    hidePopover() {
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.isOpenChange.emit(false);
            this.eventListeners.forEach((fn) => fn());
            this.eventListeners = [];
        }
    }
};
ConfirmationPopoverDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: ConfirmationPopoverOptions },
    { type: ComponentFactoryResolver },
    { type: Renderer2 }
];
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "popoverTitle", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "popoverMessage", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "confirmText", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "cancelText", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "placement", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "confirmButtonType", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "cancelButtonType", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "focusButton", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "hideConfirmButton", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "hideCancelButton", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "isDisabled", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "isOpen", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "customTemplate", void 0);
__decorate([
    Output()
], ConfirmationPopoverDirective.prototype, "isOpenChange", void 0);
__decorate([
    Output()
], ConfirmationPopoverDirective.prototype, "confirm", void 0);
__decorate([
    Output()
], ConfirmationPopoverDirective.prototype, "cancel", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "popoverClass", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "appendToBody", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "reverseButtonOrder", void 0);
__decorate([
    Input()
], ConfirmationPopoverDirective.prototype, "closeOnOutsideClick", void 0);
__decorate([
    HostListener('click')
], ConfirmationPopoverDirective.prototype, "togglePopover", null);
ConfirmationPopoverDirective = __decorate([
    Directive({
        selector: '[mwlConfirmationPopover]',
    })
], ConfirmationPopoverDirective);
export { ConfirmationPopoverDirective };
//# sourceMappingURL=data:application/json;base64,
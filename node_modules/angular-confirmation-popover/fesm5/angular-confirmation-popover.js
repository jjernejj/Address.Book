import { __decorate, __extends } from 'tslib';
import { Injectable, Component, EventEmitter, Injector, ViewContainerRef, ElementRef, ComponentFactoryResolver, Renderer2, Input, Output, HostListener, Directive, InjectionToken, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { positionElements } from 'positioning';

var ConfirmationPopoverOptions = /** @class */ (function () {
    function ConfirmationPopoverOptions() {
        this.confirmText = 'Confirm';
        this.cancelText = 'Cancel';
        this.confirmButtonType = 'success';
        this.cancelButtonType = 'outline-secondary';
        this.placement = 'top';
        this.hideConfirmButton = false;
        this.hideCancelButton = false;
        this.popoverClass = '';
        this.appendToBody = false;
        this.reverseButtonOrder = false;
        this.closeOnOutsideClick = true;
    }
    ConfirmationPopoverOptions = __decorate([
        Injectable()
    ], ConfirmationPopoverOptions);
    return ConfirmationPopoverOptions;
}());

/**
 * @internal
 */
var ConfirmationPopoverWindowOptions = /** @class */ (function (_super) {
    __extends(ConfirmationPopoverWindowOptions, _super);
    function ConfirmationPopoverWindowOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConfirmationPopoverWindowOptions = __decorate([
        Injectable()
    ], ConfirmationPopoverWindowOptions);
    return ConfirmationPopoverWindowOptions;
}(ConfirmationPopoverOptions));

/**
 * @internal
 */
var ConfirmationPopoverWindowComponent = /** @class */ (function () {
    function ConfirmationPopoverWindowComponent(options) {
        this.options = options;
    }
    ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {
        this.options.onAfterViewInit();
    };
    ConfirmationPopoverWindowComponent.ctorParameters = function () { return [
        { type: ConfirmationPopoverWindowOptions }
    ]; };
    ConfirmationPopoverWindowComponent = __decorate([
        Component({
            selector: 'mwl-confirmation-popover-window',
            template: "<ng-template #defaultTemplate let-options=\"options\">\n  <div\n    [ngClass]=\"[\n      'popover',\n      options.placement,\n      'popover-' + options.placement,\n      'bs-popover-' + options.placement,\n      options.popoverClass\n    ]\"\n  >\n    <div class=\"popover-arrow arrow\"></div>\n    <h3\n      class=\"popover-title popover-header\"\n      [innerHTML]=\"options.popoverTitle\"\n    ></h3>\n    <div class=\"popover-content popover-body\">\n      <p [innerHTML]=\"options.popoverMessage\"></p>\n      <div\n        class=\"confirm-btns\"\n        [class.confirm-btns-reversed]=\"options.reverseButtonOrder\"\n      >\n        <div class=\"confirm-btn-container\" *ngIf=\"!options.hideCancelButton\">\n          <button\n            type=\"button\"\n            [mwlFocus]=\"options.focusButton === 'cancel'\"\n            [class]=\"'btn btn-block btn-' + options.cancelButtonType\"\n            (click)=\"options.onCancel({ clickEvent: $event })\"\n            [innerHtml]=\"options.cancelText\"\n          ></button>\n        </div>\n        <div class=\"confirm-btn-container\" *ngIf=\"!options.hideConfirmButton\">\n          <button\n            type=\"button\"\n            [mwlFocus]=\"options.focusButton === 'confirm'\"\n            [class]=\"'btn btn-block btn-' + options.confirmButtonType\"\n            (click)=\"options.onConfirm({ clickEvent: $event })\"\n            [innerHtml]=\"options.confirmText\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<ng-template\n  [ngTemplateOutlet]=\"options.customTemplate || defaultTemplate\"\n  [ngTemplateOutletContext]=\"{ options: options }\"\n>\n</ng-template>\n",
            styles: [".popover{display:block}.bs-popover-bottom .arrow,.bs-popover-top .arrow{left:50%}.bs-popover-left .arrow,.bs-popover-right .arrow{top:calc(50% - 8px)}.btn{transition:none}.confirm-btns{display:flex;justify-content:space-around}.confirm-btn-container{flex-basis:50%}.confirm-btn-container:not(:first-child){margin-left:4px}.confirm-btn-container:not(:last-child){margin-right:4px}.confirm-btns-reversed{flex-direction:row-reverse}.confirm-btns-reversed .confirm-btn-container:not(:first-child){margin-right:4px;margin-left:0}.confirm-btns-reversed .confirm-btn-container:not(:last-child){margin-right:0;margin-left:4px}"]
        })
    ], ConfirmationPopoverWindowComponent);
    return ConfirmationPopoverWindowComponent;
}());

/**
 All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):
 ```html
 <button
   class="btn btn-outline-secondary"
   mwlConfirmationPopover
   [popoverTitle]="popoverTitle"
   [popoverMessage]="popoverMessage"
   placement="left"
   (confirm)="confirmClicked = true"
   (cancel)="cancelClicked = true"
   [(isOpen)]="isOpen">
    Show confirm popover!
  </button>
  ```
 */
var ConfirmationPopoverDirective = /** @class */ (function () {
    /**
     * @internal
     */
    function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, renderer) {
        this.viewContainerRef = viewContainerRef;
        this.elm = elm;
        this.defaultOptions = defaultOptions;
        this.cfr = cfr;
        this.renderer = renderer;
        /**
         * Whether to disable showing the popover. Default `false`.
         */
        this.isDisabled = false;
        /**
         * Will open or show the popover when changed.
         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
         */
        this.isOpen = false;
        /**
         * Will emit when the popover is opened or closed
         */
        this.isOpenChange = new EventEmitter(true);
        /**
         * An expression that is called when the confirm button is clicked.
         */
        this.confirm = new EventEmitter();
        /**
         * An expression that is called when the cancel button is clicked.
         */
        this.cancel = new EventEmitter();
        this.eventListeners = [];
    }
    /**
     * @internal
     */
    ConfirmationPopoverDirective.prototype.ngOnInit = function () {
        this.isOpenChange.emit(false);
    };
    /**
     * @internal
     */
    ConfirmationPopoverDirective.prototype.ngOnChanges = function (changes) {
        if (changes.isOpen) {
            if (changes.isOpen.currentValue === true) {
                this.showPopover();
            }
            else {
                this.hidePopover();
            }
        }
    };
    /**
     * @internal
     */
    ConfirmationPopoverDirective.prototype.ngOnDestroy = function () {
        this.hidePopover();
    };
    /**
     * @internal
     */
    ConfirmationPopoverDirective.prototype.onConfirm = function (event) {
        this.confirm.emit(event);
        this.hidePopover();
    };
    /**
     * @internal
     */
    ConfirmationPopoverDirective.prototype.onCancel = function (event) {
        this.cancel.emit(event);
        this.hidePopover();
    };
    /**
     * @internal
     */
    ConfirmationPopoverDirective.prototype.togglePopover = function () {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    };
    ConfirmationPopoverDirective.prototype.onDocumentClick = function (event) {
        var closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined'
            ? this.closeOnOutsideClick
            : this.defaultOptions.closeOnOutsideClick;
        if (this.popover &&
            !this.elm.nativeElement.contains(event.target) &&
            !this.popover.location.nativeElement.contains(event.target) &&
            closeOnOutsideClick) {
            this.hidePopover();
        }
    };
    ConfirmationPopoverDirective.prototype.showPopover = function () {
        var _this = this;
        if (!this.popover && !this.isDisabled) {
            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65
            // otherwise the document click event gets fired after the click event
            // that triggered the popover to open (no idea why this is so)
            setTimeout(function () {
                _this.eventListeners = [
                    _this.renderer.listen('document', 'click', function (event) {
                        return _this.onDocumentClick(event);
                    }),
                    _this.renderer.listen('document', 'touchend', function (event) {
                        return _this.onDocumentClick(event);
                    }),
                    _this.renderer.listen('window', 'resize', function () {
                        return _this.positionPopover();
                    }),
                ];
            });
            var options_1 = new ConfirmationPopoverWindowOptions();
            Object.assign(options_1, this.defaultOptions, {
                onConfirm: function (event) {
                    _this.onConfirm(event);
                },
                onCancel: function (event) {
                    _this.onCancel(event);
                },
                onAfterViewInit: function () {
                    _this.positionPopover();
                },
            });
            var optionalParams = [
                'confirmText',
                'cancelText',
                'placement',
                'confirmButtonType',
                'cancelButtonType',
                'focusButton',
                'hideConfirmButton',
                'hideCancelButton',
                'popoverClass',
                'appendToBody',
                'customTemplate',
                'reverseButtonOrder',
                'popoverTitle',
                'popoverMessage',
            ];
            optionalParams.forEach(function (param) {
                if (typeof _this[param] !== 'undefined') {
                    options_1[param] = _this[param];
                }
            });
            var componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);
            var childInjector = Injector.create({
                providers: [
                    {
                        provide: ConfirmationPopoverWindowOptions,
                        useValue: options_1,
                    },
                ],
            });
            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);
            if (options_1.appendToBody) {
                document.body.appendChild(this.popover.location.nativeElement);
            }
            this.isOpenChange.emit(true);
        }
    };
    ConfirmationPopoverDirective.prototype.positionPopover = function () {
        if (this.popover) {
            var popoverElement = this.popover.location.nativeElement.children[0];
            positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);
        }
    };
    ConfirmationPopoverDirective.prototype.hidePopover = function () {
        if (this.popover) {
            this.popover.destroy();
            delete this.popover;
            this.isOpenChange.emit(false);
            this.eventListeners.forEach(function (fn) { return fn(); });
            this.eventListeners = [];
        }
    };
    ConfirmationPopoverDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: ConfirmationPopoverOptions },
        { type: ComponentFactoryResolver },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "popoverTitle", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "popoverMessage", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "confirmText", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "cancelText", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "placement", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "confirmButtonType", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "cancelButtonType", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "focusButton", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "hideConfirmButton", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "hideCancelButton", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "isDisabled", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "isOpen", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "customTemplate", void 0);
    __decorate([
        Output()
    ], ConfirmationPopoverDirective.prototype, "isOpenChange", void 0);
    __decorate([
        Output()
    ], ConfirmationPopoverDirective.prototype, "confirm", void 0);
    __decorate([
        Output()
    ], ConfirmationPopoverDirective.prototype, "cancel", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "popoverClass", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "appendToBody", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "reverseButtonOrder", void 0);
    __decorate([
        Input()
    ], ConfirmationPopoverDirective.prototype, "closeOnOutsideClick", void 0);
    __decorate([
        HostListener('click')
    ], ConfirmationPopoverDirective.prototype, "togglePopover", null);
    ConfirmationPopoverDirective = __decorate([
        Directive({
            selector: '[mwlConfirmationPopover]',
        })
    ], ConfirmationPopoverDirective);
    return ConfirmationPopoverDirective;
}());

/**
 * A helper directive to focus buttons. You will only need this if using a custom template
 */
var FocusDirective = /** @class */ (function () {
    function FocusDirective(elm) {
        this.elm = elm;
    }
    FocusDirective.prototype.ngOnChanges = function (changes) {
        if (changes.mwlFocus && this.mwlFocus === true) {
            this.elm.nativeElement.focus();
        }
    };
    FocusDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], FocusDirective.prototype, "mwlFocus", void 0);
    FocusDirective = __decorate([
        Directive({
            selector: '[mwlFocus]',
        })
    ], FocusDirective);
    return FocusDirective;
}());

var USER_OPTIONS = new InjectionToken('confirmation popover user options');
function optionsFactory(userOptions) {
    var options = new ConfirmationPopoverOptions();
    Object.assign(options, userOptions);
    return options;
}
var ConfirmationPopoverModule = /** @class */ (function () {
    function ConfirmationPopoverModule() {
    }
    ConfirmationPopoverModule_1 = ConfirmationPopoverModule;
    ConfirmationPopoverModule.forRoot = function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: ConfirmationPopoverModule_1,
            providers: [
                {
                    provide: USER_OPTIONS,
                    useValue: options,
                },
                {
                    provide: ConfirmationPopoverOptions,
                    useFactory: optionsFactory,
                    deps: [USER_OPTIONS],
                },
            ],
        };
    };
    var ConfirmationPopoverModule_1;
    ConfirmationPopoverModule = ConfirmationPopoverModule_1 = __decorate([
        NgModule({
            declarations: [
                ConfirmationPopoverDirective,
                ConfirmationPopoverWindowComponent,
                FocusDirective,
            ],
            imports: [CommonModule],
            exports: [ConfirmationPopoverDirective, FocusDirective],
            entryComponents: [ConfirmationPopoverWindowComponent],
        })
    ], ConfirmationPopoverModule);
    return ConfirmationPopoverModule;
}());

/*
 * Public API Surface of angular-confirmation-popover
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ConfirmationPopoverDirective, ConfirmationPopoverModule, FocusDirective, USER_OPTIONS as ɵa, optionsFactory as ɵb, ConfirmationPopoverOptions as ɵc, ConfirmationPopoverWindowComponent as ɵd, ConfirmationPopoverWindowOptions as ɵe };
//# sourceMappingURL=angular-confirmation-popover.js.map

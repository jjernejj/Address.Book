{"version":3,"file":"angular-confirmation-popover.js","sources":["ng://angular-confirmation-popover/lib/confirmation-popover-options.provider.ts","ng://angular-confirmation-popover/lib/confirmation-popover-window-options.provider.ts","ng://angular-confirmation-popover/lib/confirmation-popover-window.component.ts","ng://angular-confirmation-popover/lib/confirmation-popover.directive.ts","ng://angular-confirmation-popover/lib/focus.directive.ts","ng://angular-confirmation-popover/lib/confirmation-popover.module.ts","ng://angular-confirmation-popover/public-api.ts","ng://angular-confirmation-popover/angular-confirmation-popover.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface ConfirmationPopoverOptionsInterface {\n  /**\n   * The popover title\n   */\n  popoverTitle?: string;\n\n  /**\n   * The popover message\n   */\n  popoverMessage?: string;\n\n  /**\n   * The popover confirmation button text\n   */\n  confirmText?: string;\n\n  /**\n   * The popover cancel button text\n   */\n  cancelText?: string;\n\n  /**\n   * The popover confirm button type e.g. `success`, `danger` etc\n   */\n  confirmButtonType?: string;\n\n  /**\n   * The popover cancel button type  e.g. `success`, `danger` etc\n   */\n  cancelButtonType?: string;\n\n  /**\n   * The popover placement. Can be `top`, `bottom`, `left`, `right`\n   */\n  placement?: string;\n\n  /**\n   * Which button to cancel. Can be either `confirm` or `cancel`\n   */\n  focusButton?: string;\n\n  /**\n   * Whether to hide the confirmation button\n   */\n  hideConfirmButton?: boolean;\n\n  /**\n   * Whether to hide the cancel button\n   */\n  hideCancelButton?: boolean;\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  popoverClass?: string;\n\n  /**\n   * Whether to append the popover to the document body\n   */\n  appendToBody?: boolean;\n\n  /**\n   * Swap the order of the confirm and cancel buttons\n   */\n  reverseButtonOrder?: boolean;\n\n  /**\n   * Whether or not the popover should stay open when clicking outside it\n   */\n  closeOnOutsideClick?: boolean;\n}\n\n@Injectable()\nexport class ConfirmationPopoverOptions\n  implements ConfirmationPopoverOptionsInterface {\n  popoverTitle: string;\n  popoverMessage: string;\n  confirmText: string = 'Confirm';\n  cancelText: string = 'Cancel';\n  confirmButtonType: string = 'success';\n  cancelButtonType: string = 'outline-secondary';\n  placement: string = 'top';\n  focusButton: string;\n  hideConfirmButton: boolean = false;\n  hideCancelButton: boolean = false;\n  popoverClass: string = '';\n  appendToBody: boolean = false;\n  reverseButtonOrder: boolean = false;\n  closeOnOutsideClick: boolean = true;\n}\n","import { ConfirmCancelEvent } from './confirmation-popover.directive';\nimport { Injectable, TemplateRef } from '@angular/core';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\n\n/**\n * @internal\n */\n@Injectable()\nexport class ConfirmationPopoverWindowOptions extends ConfirmationPopoverOptions {\n  onConfirm: (event: ConfirmCancelEvent) => void;\n  onCancel: (event: ConfirmCancelEvent) => void;\n  onAfterViewInit: () => void;\n  customTemplate: TemplateRef<any>;\n}\n","import { Component, AfterViewInit } from '@angular/core';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\n\n/**\n * @internal\n */\n@Component({\n  selector: 'mwl-confirmation-popover-window',\n  styleUrls: ['./confirmation-popover-window.component.scss'],\n  templateUrl: './confirmation-popover-window.component.html',\n})\nexport class ConfirmationPopoverWindowComponent implements AfterViewInit {\n  constructor(public options: ConfirmationPopoverWindowOptions) {}\n\n  ngAfterViewInit(): void {\n    this.options.onAfterViewInit();\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  Injector,\n  ComponentFactoryResolver,\n  Renderer2,\n  TemplateRef,\n  ComponentFactory,\n  SimpleChanges,\n} from '@angular/core';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\nimport { positionElements } from 'positioning';\n\n/**\n * @internal\n */\nexport interface ConfirmCancelEvent {\n  clickEvent: MouseEvent;\n}\n\n/**\n All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n ```html\n <button\n   class=\"btn btn-outline-secondary\"\n   mwlConfirmationPopover\n   [popoverTitle]=\"popoverTitle\"\n   [popoverMessage]=\"popoverMessage\"\n   placement=\"left\"\n   (confirm)=\"confirmClicked = true\"\n   (cancel)=\"cancelClicked = true\"\n   [(isOpen)]=\"isOpen\">\n    Show confirm popover!\n  </button>\n  ```\n */\n@Directive({\n  selector: '[mwlConfirmationPopover]',\n})\nexport class ConfirmationPopoverDirective\n  implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The title of the popover\n   */\n  @Input() popoverTitle: string;\n\n  /**\n   * The body text of the popover.\n   */\n  @Input() popoverMessage: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n  @Input() confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n  @Input() cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n  @Input() placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n  @Input() confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n  @Input() cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n  @Input() focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n  @Input() hideConfirmButton: boolean;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n  @Input() hideCancelButton: boolean;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n  @Input() isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n  @Input() isOpen: boolean = false;\n\n  /**\n   * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:\n   * ```html\n   * <ng-template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </ng-template>\n   * ```\n   *\n   * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n   */\n  @Input() customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n  @Output() confirm: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n  @Output() cancel: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  @Input() popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n  @Input() appendToBody: boolean;\n\n  /**\n   * Swap the order of the confirm and cancel buttons\n   */\n  @Input() reverseButtonOrder: boolean;\n\n  /**\n   * Determines whether or not the popover should stay open even when clicking outside of it\n   */\n  @Input() closeOnOutsideClick: boolean;\n\n  /**\n   * @internal\n   */\n  popover: ComponentRef<ConfirmationPopoverWindowComponent>;\n\n  private eventListeners: (() => void)[] = [];\n\n  /**\n   * @internal\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmationPopoverOptions,\n    private cfr: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  onConfirm(event: ConfirmCancelEvent) {\n    this.confirm.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  onCancel(event: ConfirmCancelEvent) {\n    this.cancel.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  @HostListener('click')\n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  private onDocumentClick(event: Event): void {\n    const closeOnOutsideClick =\n      typeof this.closeOnOutsideClick !== 'undefined'\n        ? this.closeOnOutsideClick\n        : this.defaultOptions.closeOnOutsideClick;\n    if (\n      this.popover &&\n      !this.elm.nativeElement.contains(event.target) &&\n      !this.popover.location.nativeElement.contains(event.target) &&\n      closeOnOutsideClick\n    ) {\n      this.hidePopover();\n    }\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n      // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n      // otherwise the document click event gets fired after the click event\n      // that triggered the popover to open (no idea why this is so)\n      setTimeout(() => {\n        this.eventListeners = [\n          this.renderer.listen('document', 'click', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('document', 'touchend', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('window', 'resize', () =>\n            this.positionPopover()\n          ),\n        ];\n      });\n\n      const options = new ConfirmationPopoverWindowOptions();\n      Object.assign(options, this.defaultOptions, {\n        onConfirm: (event: ConfirmCancelEvent): void => {\n          this.onConfirm(event);\n        },\n        onCancel: (event: ConfirmCancelEvent): void => {\n          this.onCancel(event);\n        },\n        onAfterViewInit: (): void => {\n          this.positionPopover();\n        },\n      });\n\n      const optionalParams: (keyof ConfirmationPopoverDirective)[] = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate',\n        'reverseButtonOrder',\n        'popoverTitle',\n        'popoverMessage',\n      ];\n      optionalParams.forEach((param) => {\n        if (typeof this[param] !== 'undefined') {\n          (options as any)[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<ConfirmationPopoverWindowComponent> = this.cfr.resolveComponentFactory(\n        ConfirmationPopoverWindowComponent\n      );\n      const childInjector = Injector.create({\n        providers: [\n          {\n            provide: ConfirmationPopoverWindowOptions,\n            useValue: options,\n          },\n        ],\n      });\n      this.popover = this.viewContainerRef.createComponent(\n        componentFactory,\n        this.viewContainerRef.length,\n        childInjector\n      );\n      if (options.appendToBody) {\n        document.body.appendChild(this.popover.location.nativeElement);\n      }\n      this.isOpenChange.emit(true);\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement = this.popover.location.nativeElement.children[0];\n      positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      delete this.popover;\n      this.isOpenChange.emit(false);\n      this.eventListeners.forEach((fn) => fn());\n      this.eventListeners = [];\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\n@Directive({\n  selector: '[mwlFocus]',\n})\nexport class FocusDirective implements OnChanges {\n  @Input() mwlFocus: boolean;\n\n  constructor(private elm: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.mwlFocus && this.mwlFocus === true) {\n      this.elm.nativeElement.focus();\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfirmationPopoverDirective } from './confirmation-popover.directive';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { FocusDirective } from './focus.directive';\nimport {\n  ConfirmationPopoverOptions,\n  ConfirmationPopoverOptionsInterface,\n} from './confirmation-popover-options.provider';\n\nexport const USER_OPTIONS: InjectionToken<string> = new InjectionToken(\n  'confirmation popover user options'\n);\n\nexport function optionsFactory(\n  userOptions: ConfirmationPopoverOptions\n): ConfirmationPopoverOptions {\n  const options = new ConfirmationPopoverOptions();\n  Object.assign(options, userOptions);\n  return options;\n}\n\n@NgModule({\n  declarations: [\n    ConfirmationPopoverDirective,\n    ConfirmationPopoverWindowComponent,\n    FocusDirective,\n  ],\n  imports: [CommonModule],\n  exports: [ConfirmationPopoverDirective, FocusDirective],\n  entryComponents: [ConfirmationPopoverWindowComponent],\n})\nexport class ConfirmationPopoverModule {\n  static forRoot(\n    options: ConfirmationPopoverOptionsInterface = {}\n  ): ModuleWithProviders<ConfirmationPopoverModule> {\n    return {\n      ngModule: ConfirmationPopoverModule,\n      providers: [\n        {\n          provide: USER_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: ConfirmationPopoverOptions,\n          useFactory: optionsFactory,\n          deps: [USER_OPTIONS],\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of angular-confirmation-popover\n */\n\nexport { ConfirmationPopoverModule } from './lib/confirmation-popover.module';\nexport { ConfirmationPopoverDirective } from './lib/confirmation-popover.directive';\nexport { FocusDirective } from './lib/focus.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ConfirmationPopoverOptions as ɵc} from './lib/confirmation-popover-options.provider';\nexport {ConfirmationPopoverWindowOptions as ɵe} from './lib/confirmation-popover-window-options.provider';\nexport {ConfirmationPopoverWindowComponent as ɵd} from './lib/confirmation-popover-window.component';\nexport {USER_OPTIONS as ɵa,optionsFactory as ɵb} from './lib/confirmation-popover.module';"],"names":[],"mappings":"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"}
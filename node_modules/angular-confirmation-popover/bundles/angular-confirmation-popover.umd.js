(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('positioning')) :
    typeof define === 'function' && define.amd ? define('angular-confirmation-popover', ['exports', '@angular/core', '@angular/common', 'positioning'], factory) :
    (global = global || self, factory(global['angular-confirmation-popover'] = {}, global.ng.core, global.ng.common, global.positioning));
}(this, (function (exports, core, common, positioning) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ConfirmationPopoverOptions = /** @class */ (function () {
        function ConfirmationPopoverOptions() {
            this.confirmText = 'Confirm';
            this.cancelText = 'Cancel';
            this.confirmButtonType = 'success';
            this.cancelButtonType = 'outline-secondary';
            this.placement = 'top';
            this.hideConfirmButton = false;
            this.hideCancelButton = false;
            this.popoverClass = '';
            this.appendToBody = false;
            this.reverseButtonOrder = false;
            this.closeOnOutsideClick = true;
        }
        ConfirmationPopoverOptions = __decorate([
            core.Injectable()
        ], ConfirmationPopoverOptions);
        return ConfirmationPopoverOptions;
    }());

    /**
     * @internal
     */
    var ConfirmationPopoverWindowOptions = /** @class */ (function (_super) {
        __extends(ConfirmationPopoverWindowOptions, _super);
        function ConfirmationPopoverWindowOptions() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConfirmationPopoverWindowOptions = __decorate([
            core.Injectable()
        ], ConfirmationPopoverWindowOptions);
        return ConfirmationPopoverWindowOptions;
    }(ConfirmationPopoverOptions));

    /**
     * @internal
     */
    var ConfirmationPopoverWindowComponent = /** @class */ (function () {
        function ConfirmationPopoverWindowComponent(options) {
            this.options = options;
        }
        ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {
            this.options.onAfterViewInit();
        };
        ConfirmationPopoverWindowComponent.ctorParameters = function () { return [
            { type: ConfirmationPopoverWindowOptions }
        ]; };
        ConfirmationPopoverWindowComponent = __decorate([
            core.Component({
                selector: 'mwl-confirmation-popover-window',
                template: "<ng-template #defaultTemplate let-options=\"options\">\n  <div\n    [ngClass]=\"[\n      'popover',\n      options.placement,\n      'popover-' + options.placement,\n      'bs-popover-' + options.placement,\n      options.popoverClass\n    ]\"\n  >\n    <div class=\"popover-arrow arrow\"></div>\n    <h3\n      class=\"popover-title popover-header\"\n      [innerHTML]=\"options.popoverTitle\"\n    ></h3>\n    <div class=\"popover-content popover-body\">\n      <p [innerHTML]=\"options.popoverMessage\"></p>\n      <div\n        class=\"confirm-btns\"\n        [class.confirm-btns-reversed]=\"options.reverseButtonOrder\"\n      >\n        <div class=\"confirm-btn-container\" *ngIf=\"!options.hideCancelButton\">\n          <button\n            type=\"button\"\n            [mwlFocus]=\"options.focusButton === 'cancel'\"\n            [class]=\"'btn btn-block btn-' + options.cancelButtonType\"\n            (click)=\"options.onCancel({ clickEvent: $event })\"\n            [innerHtml]=\"options.cancelText\"\n          ></button>\n        </div>\n        <div class=\"confirm-btn-container\" *ngIf=\"!options.hideConfirmButton\">\n          <button\n            type=\"button\"\n            [mwlFocus]=\"options.focusButton === 'confirm'\"\n            [class]=\"'btn btn-block btn-' + options.confirmButtonType\"\n            (click)=\"options.onConfirm({ clickEvent: $event })\"\n            [innerHtml]=\"options.confirmText\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<ng-template\n  [ngTemplateOutlet]=\"options.customTemplate || defaultTemplate\"\n  [ngTemplateOutletContext]=\"{ options: options }\"\n>\n</ng-template>\n",
                styles: [".popover{display:block}.bs-popover-bottom .arrow,.bs-popover-top .arrow{left:50%}.bs-popover-left .arrow,.bs-popover-right .arrow{top:calc(50% - 8px)}.btn{transition:none}.confirm-btns{display:flex;justify-content:space-around}.confirm-btn-container{flex-basis:50%}.confirm-btn-container:not(:first-child){margin-left:4px}.confirm-btn-container:not(:last-child){margin-right:4px}.confirm-btns-reversed{flex-direction:row-reverse}.confirm-btns-reversed .confirm-btn-container:not(:first-child){margin-right:4px;margin-left:0}.confirm-btns-reversed .confirm-btn-container:not(:last-child){margin-right:0;margin-left:4px}"]
            })
        ], ConfirmationPopoverWindowComponent);
        return ConfirmationPopoverWindowComponent;
    }());

    /**
     All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):
     ```html
     <button
       class="btn btn-outline-secondary"
       mwlConfirmationPopover
       [popoverTitle]="popoverTitle"
       [popoverMessage]="popoverMessage"
       placement="left"
       (confirm)="confirmClicked = true"
       (cancel)="cancelClicked = true"
       [(isOpen)]="isOpen">
        Show confirm popover!
      </button>
      ```
     */
    var ConfirmationPopoverDirective = /** @class */ (function () {
        /**
         * @internal
         */
        function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, renderer) {
            this.viewContainerRef = viewContainerRef;
            this.elm = elm;
            this.defaultOptions = defaultOptions;
            this.cfr = cfr;
            this.renderer = renderer;
            /**
             * Whether to disable showing the popover. Default `false`.
             */
            this.isDisabled = false;
            /**
             * Will open or show the popover when changed.
             * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
             */
            this.isOpen = false;
            /**
             * Will emit when the popover is opened or closed
             */
            this.isOpenChange = new core.EventEmitter(true);
            /**
             * An expression that is called when the confirm button is clicked.
             */
            this.confirm = new core.EventEmitter();
            /**
             * An expression that is called when the cancel button is clicked.
             */
            this.cancel = new core.EventEmitter();
            this.eventListeners = [];
        }
        /**
         * @internal
         */
        ConfirmationPopoverDirective.prototype.ngOnInit = function () {
            this.isOpenChange.emit(false);
        };
        /**
         * @internal
         */
        ConfirmationPopoverDirective.prototype.ngOnChanges = function (changes) {
            if (changes.isOpen) {
                if (changes.isOpen.currentValue === true) {
                    this.showPopover();
                }
                else {
                    this.hidePopover();
                }
            }
        };
        /**
         * @internal
         */
        ConfirmationPopoverDirective.prototype.ngOnDestroy = function () {
            this.hidePopover();
        };
        /**
         * @internal
         */
        ConfirmationPopoverDirective.prototype.onConfirm = function (event) {
            this.confirm.emit(event);
            this.hidePopover();
        };
        /**
         * @internal
         */
        ConfirmationPopoverDirective.prototype.onCancel = function (event) {
            this.cancel.emit(event);
            this.hidePopover();
        };
        /**
         * @internal
         */
        ConfirmationPopoverDirective.prototype.togglePopover = function () {
            if (!this.popover) {
                this.showPopover();
            }
            else {
                this.hidePopover();
            }
        };
        ConfirmationPopoverDirective.prototype.onDocumentClick = function (event) {
            var closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined'
                ? this.closeOnOutsideClick
                : this.defaultOptions.closeOnOutsideClick;
            if (this.popover &&
                !this.elm.nativeElement.contains(event.target) &&
                !this.popover.location.nativeElement.contains(event.target) &&
                closeOnOutsideClick) {
                this.hidePopover();
            }
        };
        ConfirmationPopoverDirective.prototype.showPopover = function () {
            var _this = this;
            if (!this.popover && !this.isDisabled) {
                // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65
                // otherwise the document click event gets fired after the click event
                // that triggered the popover to open (no idea why this is so)
                setTimeout(function () {
                    _this.eventListeners = [
                        _this.renderer.listen('document', 'click', function (event) {
                            return _this.onDocumentClick(event);
                        }),
                        _this.renderer.listen('document', 'touchend', function (event) {
                            return _this.onDocumentClick(event);
                        }),
                        _this.renderer.listen('window', 'resize', function () {
                            return _this.positionPopover();
                        }),
                    ];
                });
                var options_1 = new ConfirmationPopoverWindowOptions();
                Object.assign(options_1, this.defaultOptions, {
                    onConfirm: function (event) {
                        _this.onConfirm(event);
                    },
                    onCancel: function (event) {
                        _this.onCancel(event);
                    },
                    onAfterViewInit: function () {
                        _this.positionPopover();
                    },
                });
                var optionalParams = [
                    'confirmText',
                    'cancelText',
                    'placement',
                    'confirmButtonType',
                    'cancelButtonType',
                    'focusButton',
                    'hideConfirmButton',
                    'hideCancelButton',
                    'popoverClass',
                    'appendToBody',
                    'customTemplate',
                    'reverseButtonOrder',
                    'popoverTitle',
                    'popoverMessage',
                ];
                optionalParams.forEach(function (param) {
                    if (typeof _this[param] !== 'undefined') {
                        options_1[param] = _this[param];
                    }
                });
                var componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);
                var childInjector = core.Injector.create({
                    providers: [
                        {
                            provide: ConfirmationPopoverWindowOptions,
                            useValue: options_1,
                        },
                    ],
                });
                this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);
                if (options_1.appendToBody) {
                    document.body.appendChild(this.popover.location.nativeElement);
                }
                this.isOpenChange.emit(true);
            }
        };
        ConfirmationPopoverDirective.prototype.positionPopover = function () {
            if (this.popover) {
                var popoverElement = this.popover.location.nativeElement.children[0];
                positioning.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);
            }
        };
        ConfirmationPopoverDirective.prototype.hidePopover = function () {
            if (this.popover) {
                this.popover.destroy();
                delete this.popover;
                this.isOpenChange.emit(false);
                this.eventListeners.forEach(function (fn) { return fn(); });
                this.eventListeners = [];
            }
        };
        ConfirmationPopoverDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.ElementRef },
            { type: ConfirmationPopoverOptions },
            { type: core.ComponentFactoryResolver },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "popoverTitle", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "popoverMessage", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "confirmText", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "cancelText", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "placement", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "confirmButtonType", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "cancelButtonType", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "focusButton", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "hideConfirmButton", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "hideCancelButton", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "isDisabled", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "isOpen", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "customTemplate", void 0);
        __decorate([
            core.Output()
        ], ConfirmationPopoverDirective.prototype, "isOpenChange", void 0);
        __decorate([
            core.Output()
        ], ConfirmationPopoverDirective.prototype, "confirm", void 0);
        __decorate([
            core.Output()
        ], ConfirmationPopoverDirective.prototype, "cancel", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "popoverClass", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "appendToBody", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "reverseButtonOrder", void 0);
        __decorate([
            core.Input()
        ], ConfirmationPopoverDirective.prototype, "closeOnOutsideClick", void 0);
        __decorate([
            core.HostListener('click')
        ], ConfirmationPopoverDirective.prototype, "togglePopover", null);
        ConfirmationPopoverDirective = __decorate([
            core.Directive({
                selector: '[mwlConfirmationPopover]',
            })
        ], ConfirmationPopoverDirective);
        return ConfirmationPopoverDirective;
    }());

    /**
     * A helper directive to focus buttons. You will only need this if using a custom template
     */
    var FocusDirective = /** @class */ (function () {
        function FocusDirective(elm) {
            this.elm = elm;
        }
        FocusDirective.prototype.ngOnChanges = function (changes) {
            if (changes.mwlFocus && this.mwlFocus === true) {
                this.elm.nativeElement.focus();
            }
        };
        FocusDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input()
        ], FocusDirective.prototype, "mwlFocus", void 0);
        FocusDirective = __decorate([
            core.Directive({
                selector: '[mwlFocus]',
            })
        ], FocusDirective);
        return FocusDirective;
    }());

    var USER_OPTIONS = new core.InjectionToken('confirmation popover user options');
    function optionsFactory(userOptions) {
        var options = new ConfirmationPopoverOptions();
        Object.assign(options, userOptions);
        return options;
    }
    var ConfirmationPopoverModule = /** @class */ (function () {
        function ConfirmationPopoverModule() {
        }
        ConfirmationPopoverModule_1 = ConfirmationPopoverModule;
        ConfirmationPopoverModule.forRoot = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: ConfirmationPopoverModule_1,
                providers: [
                    {
                        provide: USER_OPTIONS,
                        useValue: options,
                    },
                    {
                        provide: ConfirmationPopoverOptions,
                        useFactory: optionsFactory,
                        deps: [USER_OPTIONS],
                    },
                ],
            };
        };
        var ConfirmationPopoverModule_1;
        ConfirmationPopoverModule = ConfirmationPopoverModule_1 = __decorate([
            core.NgModule({
                declarations: [
                    ConfirmationPopoverDirective,
                    ConfirmationPopoverWindowComponent,
                    FocusDirective,
                ],
                imports: [common.CommonModule],
                exports: [ConfirmationPopoverDirective, FocusDirective],
                entryComponents: [ConfirmationPopoverWindowComponent],
            })
        ], ConfirmationPopoverModule);
        return ConfirmationPopoverModule;
    }());

    exports.ConfirmationPopoverDirective = ConfirmationPopoverDirective;
    exports.ConfirmationPopoverModule = ConfirmationPopoverModule;
    exports.FocusDirective = FocusDirective;
    exports.ɵa = USER_OPTIONS;
    exports.ɵb = optionsFactory;
    exports.ɵc = ConfirmationPopoverOptions;
    exports.ɵd = ConfirmationPopoverWindowComponent;
    exports.ɵe = ConfirmationPopoverWindowOptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-confirmation-popover.umd.js.map
